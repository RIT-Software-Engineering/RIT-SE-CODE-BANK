{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alecd/RIT/SCOOP/RIT-SE-CODE-BANK/apps/rubricon/ui/src/components/RubricList.js"],"sourcesContent":["'use client';\r\n\r\nimport Link from \"next/link\";\r\n// import \"../styles/components/RubricList.css\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction RubricListItem({ data, setData, index }) {\r\n    // This component will represent a single rubric item in the list.\r\n    // It could be expanded to include more functionality or styling.\r\n    return (\r\n        <div className=\"list-item\">\r\n            <h3>{data.title}</h3>\r\n            <p>{data.description}</p>\r\n            <Link href={\"/rubrics/\" + data.id}>View Details</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function RubricList() {\r\n    // This component will list all the rubrics available to the signed-in user.\r\n    // In a real application, this would likely fetch data from an API or database.\r\n    const [rubrics, setRubrics] = useState([]);\r\n\r\n    function setData(index, newData) {\r\n        // This function updates the rubric data at the specified index.\r\n        // It could be used to update a rubric's details after editing.\r\n        const updatedRubrics = [...rubrics];\r\n        updatedRubrics[index] = newData;\r\n        setRubrics(updatedRubrics);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Simulating fetching rubrics from an API or database\r\n        const fetchRubrics = async () => {\r\n            try {\r\n                const response = await fetch(\"http://localhost:5000/rubrics\");\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                const data = await response.json();\r\n                setRubrics(data);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch rubrics:\", error);\r\n            }\r\n        };\r\n\r\n        fetchRubrics();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"list-container\">\r\n            <div className=\"list-header\">\r\n                <h1>Rubric List</h1>\r\n                <p>This is where you can view and manage your rubrics.</p>\r\n            </div>\r\n            <>\r\n                {rubrics.map((rubric, index) => (\r\n                    <RubricListItem key={index} data={rubric} setData={setData} index={index} />\r\n                ))}\r\n                {/* Placeholder for a Rubric component */}\r\n            </>\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA,gDAAgD;AAChD;AAJA;;;;AAMA,SAAS,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC5C,kEAAkE;IAClE,iEAAiE;IACjE,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;0BAAI,KAAK,KAAK;;;;;;0BACf,8OAAC;0BAAG,KAAK,WAAW;;;;;;0BACpB,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAM,cAAc,KAAK,EAAE;0BAAE;;;;;;;;;;;;AAG/C;AAEe,SAAS;IACpB,4EAA4E;IAC5E,+EAA+E;IAC/E,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAEzC,SAAS,QAAQ,KAAK,EAAE,OAAO;QAC3B,gEAAgE;QAChE,+DAA+D;QAC/D,MAAM,iBAAiB;eAAI;SAAQ;QACnC,cAAc,CAAC,MAAM,GAAG;QACxB,WAAW;IACf;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,sDAAsD;QACtD,MAAM,eAAe;YACjB,IAAI;gBACA,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBACd,MAAM,IAAI,MAAM;gBACpB;gBACA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,WAAW;YACf,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC9C;QACJ;QAEA;IACJ,GAAG,EAAE;IAEL,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCAAE;;;;;;;;;;;;0BAEP;0BACK,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBAClB,8OAAC;wBAA2B,MAAM;wBAAQ,SAAS;wBAAS,OAAO;uBAA9C;;;;;;;;;;;;AAMzC","debugId":null}}]
}