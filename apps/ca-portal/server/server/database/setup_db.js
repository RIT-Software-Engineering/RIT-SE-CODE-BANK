/**
 * !! FOR DEV USE ONLY !!
 *
 * Contains functions useful for rapidly resetting database schema and inserting dummy info during development.
 * Separates database drop, database creation, schema creation via Prisma, and data seeding.
 */

const { exec } = require('child_process');
const util = require('util');
const path = require('path');
const fs = require('fs').promises;

const execPromise = util.promisify(exec);

const path_to_env = path.resolve(__dirname, '../../.env');
if (!process.env.DATABASE_URL) {
    try {
        require('dotenv').config({ path: path_to_env });
    } catch (e) {
        console.error("[DB Redeploy] ERROR: dotenv failed to load from setup_db.js:", e.message);
    }
}

// Path to your dummy data SQL files
const DUMMY_DATA_DIR = path.join(__dirname, 'test_data');

// --- Helper Functions for Database Operations ---

/**
 * Parses the DATABASE_URL to extract connection details.
 * Assumes format: mysql://user:password@host:port/database_name
 * @param {string} dbUrl The database URL from .env
 * @returns {object} { user, password, host, port, dbName }
 */
function parseDatabaseUrl(dbUrl) {
    const matches = dbUrl.match(/mysql:\/\/(.*?):(.*?)@(.*?):(\d+)\/(.*)/);
    if (!matches) {
        throw new Error("Failed to parse DATABASE_URL. Ensure it's in the format: mysql://user:password@host:port/database_name");
    }
    const [, user, password, host, port, dbName] = matches;
    return { user, password, host, port, dbName };
}

/**
 * Drops the specified database.
 * Uses the `mysql` command-line client.
 */
async function dropDatabase() {
    console.log("[DB Redeploy] Dropping database...");
    const dbUrl = process.env.DATABASE_URL;
    if (!dbUrl) {
        throw new Error("DATABASE_URL not found in environment variables. Cannot drop database.");
    }

    let dbConfig;
    try {
        dbConfig = parseDatabaseUrl(dbUrl);
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Invalid DATABASE_URL format for dropping database.");
        throw error;
    }

    const dropCommand = `mysql -h ${dbConfig.host} -P ${dbConfig.port} -u ${dbConfig.user} -p"${dbConfig.password}" -e 'DROP DATABASE IF EXISTS \`${dbConfig.dbName}\`;'`;

    try {
        const { stdout, stderr } = await execPromise(dropCommand);
        if (stdout) console.log(stdout);
        if (stderr) console.error(stderr);
        console.log(`[DB Redeploy] Database '${dbConfig.dbName}' dropped successfully (if it existed).`);
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Failed to drop database.");
        console.error(error.message);
        throw new Error("Database drop failed.");
    }
}

/**
 * Creates the specified database.
 * Uses the `mysql` command-line client.
 */
async function createDatabase() {
    console.log("[DB Redeploy] Creating database...");
    const dbUrl = process.env.DATABASE_URL;
    if (!dbUrl) {
        throw new Error("DATABASE_URL not found in environment variables. Cannot create database.");
    }

    let dbConfig;
    try {
        dbConfig = parseDatabaseUrl(dbUrl);
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Invalid DATABASE_URL format for creating database.");
        throw error;
    }

    const createCommand = `mysql -h ${dbConfig.host} -P ${dbConfig.port} -u ${dbConfig.user} -p"${dbConfig.password}" -e 'CREATE DATABASE IF NOT EXISTS \`${dbConfig.dbName}\`;'`;

    try {
        const { stdout, stderr } = await execPromise(createCommand);
        if (stdout) console.log(stdout);
        if (stderr) console.error(stderr);
        console.log(`[DB Redeploy] Database '${dbConfig.dbName}' created successfully.`);
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Failed to create database.");
        console.error(error.message);
        throw new Error("Database creation failed.");
    }
}



/**
 * Applies all pending Prisma migrations to create the schema.
 * This assumes migrations have already been generated by `prisma migrate dev`.
 */
async function createSchemaFromMigrations() {
    console.log("[DB Redeploy] Applying schema migrations using 'npx prisma migrate deploy'...");
    try {
        const schemaPath = './server/database/prisma/schema.prisma';
        const { stdout, stderr } = await execPromise(`npx prisma migrate deploy --schema ${schemaPath}`);
        if (stdout) console.log(stdout);
        if (stderr) console.error(stderr);
        console.log("[DB Redeploy] Database schema applied successfully from migrations.");
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Failed to apply schema migrations.");
        console.error(error.message);
        throw new Error("Prisma migrate deploy failed.");
    }
}

/**
 * Populates dummy data by executing SQL files found in DUMMY_DATA_DIR.
 * Requires the `mysql` client to be available in the environment's PATH.
 */
async function populateDummyData() {
  console.log("[DB Redeploy] Populating dummy data from SQL files...");
    const dbUrl = process.env.DATABASE_URL;
    if (!dbUrl) {
        throw new Error("DATABASE_URL not found in environment variables. Cannot connect to database for seeding.");
    }

    let dbConfig;
    try {
        dbConfig = parseDatabaseUrl(dbUrl);
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Invalid DATABASE_URL format.");
        throw error;
    }

    try {
        const files = await fs.readdir(DUMMY_DATA_DIR);
        const sqlFiles = files.filter(file => file.endsWith('.sql') && file !== 'fill_test_data.sql');

        if (sqlFiles.length === 0) {
            console.warn("[DB Redeploy] No SQL dummy data files found in", DUMMY_DATA_DIR);
            return;
        }

        for (const file of sqlFiles) { // Loop sequentially
            const filePath = path.join(DUMMY_DATA_DIR, file);

            const command = `mysql -h ${dbConfig.host} -P ${dbConfig.port} -u ${dbConfig.user} -p"${dbConfig.password}" ${dbConfig.dbName} < "${filePath}"`;

            console.log(`[DB Redeploy] Executing dummy data file: ${file} by piping...`);
            
            try {
                const { stdout, stderr } = await execPromise(command);
                if (stdout) console.log(stdout);
                if (stderr) console.error(stderr);
            } catch (execError) {
                console.error(`[DB Redeploy] ERROR: Failed to execute SQL from ${file}.`);
                console.error(execError.message);
                console.error("Problematic command:", command);
                throw execError;
            }
        }
        console.log("[DB Redeploy] Dummy data population complete.");
    } catch (error) {
        console.error("[DB Redeploy] ERROR: Failed to populate dummy data from SQL files.");
        console.error(error.message);
        throw new Error("Dummy data population failed.");
    }
}

// --- Main Redeploy Function ---
async function redeployDatabase() {
  if (process.env.NODE_ENV === "production") {
    console.error("[DB Redeploy] ERROR: Attempted to reset database on production server. Aborting.");
    process.exit(1);
  }

  try {
    console.log("--- Starting Database Redeploy ---");

    // Drop the database
    await dropDatabase();
    
    // Create the empty database
    await createDatabase();

    // Apply schema using Prisma's migrations
    await createSchemaFromMigrations();

    // Populate dummy data
    await populateDummyData();

    console.log("--- Database Redeploy Complete ---");
  } catch (error) {
    console.error("[DB Redeploy] Database redeploy failed:", error);
    process.exit(1);
  }
}

// Export the function
module.exports = redeployDatabase;